# Assignment 3 Comp 445

Author: Stephen Young, st_youn at encs.concordia.ca
Student ID: 9736247

The application is a routed FTP client/server application over UDP/winsock

Included are the following files:

* client.cpp - The FTP client
* server.cpp - The FTP server
* protocol.cpp - A custom file transfer protocol library
* ftplib.cpp - A low-level socket interaction library for sending/receiving packets
* socketlib.cpp - A low-level library for connection + binding of UDP sockets
* Makefile - The makefile, optimized for MinGW/GNU

as well as the necessary router.h, router.cpp - Packet-dropping router application

The application was made to be built using MinGW on windows, and was built and
developed under Cygwin. It should work as well with Visual Studio, but is best
compiled using the GCC c++ compiler (g++) and GNU Make

Basic build: make clean && make all
Server application: ./server.exe
Client application: ./client.exe

The server assumes the following:

* Frame size is 128 bytes
* Window size is between 1 and 19
* Hostname does not exceed 11 characters
* Filename and Username must be <= 128 characters


Results of DELAY tests (number of packets required)
                
                                WINDOW SIZE
    
           1      3      5      7      9      11     13     15     17     19

    0%    560    560    560    560    560    560    560    560    560    560 
D   5%   1098    691    649    995   1043    729    896   1166    967    712 
E  10%   1228    913   1435   1079   1269   1179    695    791    673    680 
L  15%    770   1888   2045   1721   2057   1210   2034    724   1457    884 
A  20%   2595   1972   1202   2846   2322   2245   2765   2086   2935   1293 
Y  25%   3108   3360   1763   1327   3157   2798   2835    863   2886   1819 
   30%   1353   3647   3462   2449   3995   1216   2299   3852   1372   1304 
   35%   2861   1342   2138   2920   2889   3992   2127   3849   2303   1778 
   40%   2731   1080   3685   4823   1666   1607   1943   2902   4787   3790 
   45%   1252   2499   5640   4536   1281   4749   1679   2369   5092   5433 
   50%   3306   3145   2132   3828   1739   4688   5823   3010   3468   4819 


Results of DROP tests (number of packets required)

                                WINDOW SIZE

           1      3      5      7      9      11     13     15     17     19

    0%    560    560    560    560    560    560    560    560    560    560 
    5%    883    982    844    839    879   1066   1074    651   1053   1057 
D  10%   1141   1651   1052    926   1209   1034   1658   1642    870   1253 
R  15%   1221   1462   2261    882   1731   1323   2071   1394   1687   1772 
O  20%   2176   1840   1175   1782   2931   2724   2789   2674   2006    849 
P  25%   3461   2394   2130   1741   2489   1566   1160   1498   3355   1702 
   30%   3607   3497   3136   2225   3170   1878   2145   2986   3602   2937 
   35%   1248   2994   1095   4059   4185   4252   3995   4036   2091   3232 
   40%   3517   2635   3330   2784   2497   1138   3027   3971   3672   2753 
   45%   4942   4128   4544   1481   4423   3742   4242   3583   3505   1904 
   50%   2157   4342   2483   1482   5862   1471   5986   4057   5449   5461 


The above results show that both drops and delays given the 300ms timeout create
very similar patterns in required packet counts. It can be noted that there is often
a lower count of required packets when the window size is smaller, this seems to be
because the window size being large, while providing a larger volume of data, in
situations where there is a lot of instability, it means that more packets have to
be resent potentially multiple times as NAK responses arrive. This is inefficient
for the purposes of saving network traffic, however performs very well for stability
as well as in situations where network traffic is relatively stable and reliable. It would
be a more ideal solution for within a LAN than over a WAN as emulated here with the
use of the packet dropping router.
